"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var format_cookie_1 = require('./format-cookie');
var parse_cookies_1 = require('./parse-cookies');

var CookieStorage = function () {
    function CookieStorage(defaultOptions) {
        _classCallCheck(this, CookieStorage);

        this._defaultOptions = Object.assign({
            path: null,
            domain: null,
            expires: null,
            secure: false
        }, defaultOptions);
    }

    _createClass(CookieStorage, [{
        key: 'clear',
        value: function clear() {
            var _this = this;

            var parsed = parse_cookies_1.parseCookies(this._getCookie());
            var keys = Object.keys(parsed);
            keys.forEach(function (key) {
                return _this.removeItem(key);
            });
        }
    }, {
        key: 'getItem',
        value: function getItem(key) {
            var parsed = parse_cookies_1.parseCookies(this._getCookie());
            return parsed.hasOwnProperty(key) ? parsed[key] : null;
        }
    }, {
        key: 'key',
        value: function key(index) {
            var parsed = parse_cookies_1.parseCookies(this._getCookie());
            var sortedKeys = Object.keys(parsed).sort();
            return index < sortedKeys.length ? sortedKeys[index] : null;
        }
    }, {
        key: 'removeItem',
        value: function removeItem(key) {
            var data = '';
            var options = Object.assign({}, this._defaultOptions, {
                expires: new Date(0)
            });
            var formatted = format_cookie_1.formatCookie(key, data, options);
            this._setCookie(formatted);
        }
    }, {
        key: 'setItem',
        value: function setItem(key, data, options) {
            options = Object.assign({}, this._defaultOptions, options);
            var formatted = format_cookie_1.formatCookie(key, data, options);
            this._setCookie(formatted);
        }
    }, {
        key: '_getCookie',
        value: function _getCookie() {
            return typeof document === 'undefined' ? '' : typeof document.cookie === 'undefined' ? '' : document.cookie;
        }
    }, {
        key: '_setCookie',
        value: function _setCookie(value) {
            document.cookie = value;
        }
    }, {
        key: 'length',
        get: function get() {
            var parsed = parse_cookies_1.parseCookies(this._getCookie());
            var keys = Object.keys(parsed);
            return keys.length;
        }
    }]);

    return CookieStorage;
}();

exports.CookieStorage = CookieStorage;